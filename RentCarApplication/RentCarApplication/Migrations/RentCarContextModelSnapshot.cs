// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentCarApplication.DataAccess.Context;

#nullable disable

namespace RentCarApplication.Migrations
{
    [DbContext(typeof(RentCarContext))]
    partial class RentCarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "22715bdd-ea6e-45a4-b5f1-17a56b79ca7b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "61929082-1e2c-4950-8d53-3e5c40a50495",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "e014cb20-e4e9-4d22-afed-f3d0fc837863",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "9c44780-a24d-4543-9cc6-0993d048aacu7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "9a27620-a44f-4543-9dk6-0993d048sia7",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Brand")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfManufacture")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Km")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = 5,
                            DateOfManufacture = new DateTime(2022, 6, 21, 1, 14, 14, 87, DateTimeKind.Local).AddTicks(1102),
                            Km = 131,
                            Price = 67,
                            RegistrationNumber = "6953PG3D2YTO49432",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Brand = 10,
                            DateOfManufacture = new DateTime(2022, 8, 30, 11, 16, 52, 254, DateTimeKind.Local).AddTicks(5874),
                            Km = 663,
                            Price = 99,
                            RegistrationNumber = "5J39QZ3KLPPM42935",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Brand = 2,
                            DateOfManufacture = new DateTime(2022, 9, 15, 17, 6, 56, 973, DateTimeKind.Local).AddTicks(1655),
                            Km = 356,
                            Price = 26,
                            RegistrationNumber = "6HIJ2XPFJ8I358524",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Brand = 3,
                            DateOfManufacture = new DateTime(2022, 7, 21, 4, 3, 40, 970, DateTimeKind.Local).AddTicks(9273),
                            Km = 975,
                            Price = 71,
                            RegistrationNumber = "JKTP6ZEDY8SM44881",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            Brand = 10,
                            DateOfManufacture = new DateTime(2023, 3, 22, 21, 32, 20, 361, DateTimeKind.Local).AddTicks(7064),
                            Km = 645,
                            Price = 10,
                            RegistrationNumber = "21VKXPEII9PZ72371",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Brand = 7,
                            DateOfManufacture = new DateTime(2022, 7, 2, 10, 1, 0, 251, DateTimeKind.Local).AddTicks(4692),
                            Km = 753,
                            Price = 87,
                            RegistrationNumber = "ALT4MSEAXWFD98743",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            Brand = 10,
                            DateOfManufacture = new DateTime(2022, 12, 13, 5, 36, 34, 665, DateTimeKind.Local).AddTicks(8824),
                            Km = 66,
                            Price = 77,
                            RegistrationNumber = "HJ2YE0YA1LGO85694",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            Brand = 1,
                            DateOfManufacture = new DateTime(2022, 8, 21, 12, 40, 18, 909, DateTimeKind.Local).AddTicks(1331),
                            Km = 273,
                            Price = 34,
                            RegistrationNumber = "R038BM2OZTHR80740",
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            Brand = 0,
                            DateOfManufacture = new DateTime(2022, 8, 4, 22, 1, 42, 704, DateTimeKind.Local).AddTicks(4842),
                            Km = 206,
                            Price = 98,
                            RegistrationNumber = "7II96EUXFVBW55387",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            Brand = 7,
                            DateOfManufacture = new DateTime(2022, 11, 22, 22, 45, 40, 536, DateTimeKind.Local).AddTicks(7320),
                            Km = 783,
                            Price = 89,
                            RegistrationNumber = "HG7IMIQKI6FX84258",
                            Type = 3
                        },
                        new
                        {
                            Id = 11,
                            Brand = 2,
                            DateOfManufacture = new DateTime(2022, 11, 23, 1, 8, 0, 574, DateTimeKind.Local).AddTicks(9111),
                            Km = 117,
                            Price = 49,
                            RegistrationNumber = "C8YBXLFFQCAG38575",
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Brand = 3,
                            DateOfManufacture = new DateTime(2022, 9, 18, 4, 43, 38, 134, DateTimeKind.Local).AddTicks(7449),
                            Km = 327,
                            Price = 60,
                            RegistrationNumber = "YNTCWRVU31YQ64406",
                            Type = 3
                        },
                        new
                        {
                            Id = 13,
                            Brand = 6,
                            DateOfManufacture = new DateTime(2022, 8, 4, 15, 23, 29, 121, DateTimeKind.Local).AddTicks(6579),
                            Km = 125,
                            Price = 79,
                            RegistrationNumber = "GKPODHXSDUXH89312",
                            Type = 3
                        },
                        new
                        {
                            Id = 14,
                            Brand = 8,
                            DateOfManufacture = new DateTime(2022, 11, 22, 4, 8, 10, 318, DateTimeKind.Local).AddTicks(9706),
                            Km = 628,
                            Price = 57,
                            RegistrationNumber = "J9HSE6496OJK57148",
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            Brand = 2,
                            DateOfManufacture = new DateTime(2022, 5, 17, 3, 24, 58, 385, DateTimeKind.Local).AddTicks(1),
                            Km = 714,
                            Price = 89,
                            RegistrationNumber = "ZOI7T2UFMSKI62273",
                            Type = 1
                        },
                        new
                        {
                            Id = 16,
                            Brand = 3,
                            DateOfManufacture = new DateTime(2022, 10, 9, 7, 28, 12, 277, DateTimeKind.Local).AddTicks(9486),
                            Km = 795,
                            Price = 45,
                            RegistrationNumber = "007X7S5N09QV74878",
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            Brand = 9,
                            DateOfManufacture = new DateTime(2022, 10, 18, 20, 47, 48, 513, DateTimeKind.Local).AddTicks(7078),
                            Km = 636,
                            Price = 22,
                            RegistrationNumber = "2FVGLM1DGYGQ83838",
                            Type = 2
                        },
                        new
                        {
                            Id = 18,
                            Brand = 9,
                            DateOfManufacture = new DateTime(2022, 12, 31, 7, 45, 39, 793, DateTimeKind.Local).AddTicks(6299),
                            Km = 865,
                            Price = 96,
                            RegistrationNumber = "7EA2VL1EUPW740255",
                            Type = 0
                        },
                        new
                        {
                            Id = 19,
                            Brand = 11,
                            DateOfManufacture = new DateTime(2023, 2, 13, 17, 35, 11, 838, DateTimeKind.Local).AddTicks(655),
                            Km = 748,
                            Price = 18,
                            RegistrationNumber = "DAFMPHJL7GE985759",
                            Type = 0
                        },
                        new
                        {
                            Id = 20,
                            Brand = 10,
                            DateOfManufacture = new DateTime(2023, 3, 24, 8, 54, 23, 459, DateTimeKind.Local).AddTicks(9337),
                            Km = 746,
                            Price = 96,
                            RegistrationNumber = "N4Q8NMOJMUB695778",
                            Type = 0
                        },
                        new
                        {
                            Id = 21,
                            Brand = 2,
                            DateOfManufacture = new DateTime(2023, 1, 26, 14, 12, 40, 288, DateTimeKind.Local).AddTicks(1821),
                            Km = 928,
                            Price = 54,
                            RegistrationNumber = "XU4UI6F8DAHT52832",
                            Type = 2
                        },
                        new
                        {
                            Id = 22,
                            Brand = 9,
                            DateOfManufacture = new DateTime(2023, 3, 6, 11, 34, 55, 967, DateTimeKind.Local).AddTicks(2828),
                            Km = 111,
                            Price = 95,
                            RegistrationNumber = "DUF29OA3SJXH99664",
                            Type = 2
                        },
                        new
                        {
                            Id = 23,
                            Brand = 6,
                            DateOfManufacture = new DateTime(2022, 7, 13, 7, 34, 42, 977, DateTimeKind.Local).AddTicks(3883),
                            Km = 176,
                            Price = 64,
                            RegistrationNumber = "CIKJSBB0HLVB64874",
                            Type = 3
                        },
                        new
                        {
                            Id = 24,
                            Brand = 3,
                            DateOfManufacture = new DateTime(2022, 8, 29, 11, 55, 46, 884, DateTimeKind.Local).AddTicks(3168),
                            Km = 501,
                            Price = 64,
                            RegistrationNumber = "IYA2JXVYSMKU74792",
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            Brand = 11,
                            DateOfManufacture = new DateTime(2022, 11, 22, 8, 22, 35, 652, DateTimeKind.Local).AddTicks(231),
                            Km = 123,
                            Price = 98,
                            RegistrationNumber = "H2FY31WCU1UM36177",
                            Type = 0
                        },
                        new
                        {
                            Id = 26,
                            Brand = 8,
                            DateOfManufacture = new DateTime(2022, 7, 16, 14, 48, 46, 690, DateTimeKind.Local).AddTicks(6905),
                            Km = 603,
                            Price = 14,
                            RegistrationNumber = "AZIGQIQTHGDU41956",
                            Type = 2
                        },
                        new
                        {
                            Id = 27,
                            Brand = 9,
                            DateOfManufacture = new DateTime(2022, 7, 22, 15, 13, 6, 645, DateTimeKind.Local).AddTicks(9735),
                            Km = 532,
                            Price = 4,
                            RegistrationNumber = "KIRKY1A8J7H538409",
                            Type = 1
                        },
                        new
                        {
                            Id = 28,
                            Brand = 1,
                            DateOfManufacture = new DateTime(2023, 1, 22, 1, 14, 58, 684, DateTimeKind.Local).AddTicks(4384),
                            Km = 297,
                            Price = 69,
                            RegistrationNumber = "IDFMLDB0DEED49099",
                            Type = 1
                        },
                        new
                        {
                            Id = 29,
                            Brand = 1,
                            DateOfManufacture = new DateTime(2022, 10, 8, 23, 18, 46, 804, DateTimeKind.Local).AddTicks(7132),
                            Km = 403,
                            Price = 38,
                            RegistrationNumber = "GD82URW9XEVL85978",
                            Type = 2
                        },
                        new
                        {
                            Id = 30,
                            Brand = 9,
                            DateOfManufacture = new DateTime(2022, 7, 8, 14, 43, 8, 375, DateTimeKind.Local).AddTicks(8141),
                            Km = 336,
                            Price = 55,
                            RegistrationNumber = "I085KIYQAWCL15424",
                            Type = 3
                        },
                        new
                        {
                            Id = 31,
                            Brand = 6,
                            DateOfManufacture = new DateTime(2022, 7, 11, 11, 47, 28, 384, DateTimeKind.Local).AddTicks(3568),
                            Km = 329,
                            Price = 50,
                            RegistrationNumber = "8TGWPP28W1E756001",
                            Type = 2
                        },
                        new
                        {
                            Id = 32,
                            Brand = 0,
                            DateOfManufacture = new DateTime(2022, 7, 2, 19, 59, 28, 502, DateTimeKind.Local).AddTicks(668),
                            Km = 491,
                            Price = 82,
                            RegistrationNumber = "CDDJA2M4FGLQ45089",
                            Type = 1
                        },
                        new
                        {
                            Id = 33,
                            Brand = 10,
                            DateOfManufacture = new DateTime(2022, 12, 30, 8, 45, 24, 878, DateTimeKind.Local).AddTicks(95),
                            Km = 339,
                            Price = 27,
                            RegistrationNumber = "VUHWPHPPR4KX66590",
                            Type = 2
                        },
                        new
                        {
                            Id = 34,
                            Brand = 9,
                            DateOfManufacture = new DateTime(2022, 5, 15, 21, 25, 34, 260, DateTimeKind.Local).AddTicks(6869),
                            Km = 568,
                            Price = 75,
                            RegistrationNumber = "0Q4OL8R3RWCP98033",
                            Type = 2
                        },
                        new
                        {
                            Id = 35,
                            Brand = 10,
                            DateOfManufacture = new DateTime(2023, 1, 11, 21, 9, 56, 993, DateTimeKind.Local).AddTicks(6134),
                            Km = 849,
                            Price = 99,
                            RegistrationNumber = "T87ON8XMXMIX80152",
                            Type = 3
                        },
                        new
                        {
                            Id = 36,
                            Brand = 1,
                            DateOfManufacture = new DateTime(2023, 2, 10, 1, 46, 39, 4, DateTimeKind.Local).AddTicks(3101),
                            Km = 645,
                            Price = 13,
                            RegistrationNumber = "83YAFZ3A5OF517540",
                            Type = 2
                        },
                        new
                        {
                            Id = 37,
                            Brand = 9,
                            DateOfManufacture = new DateTime(2023, 1, 25, 12, 26, 21, 6, DateTimeKind.Local).AddTicks(7635),
                            Km = 188,
                            Price = 45,
                            RegistrationNumber = "DFIOE7E7RPOA21210",
                            Type = 3
                        },
                        new
                        {
                            Id = 38,
                            Brand = 3,
                            DateOfManufacture = new DateTime(2022, 7, 15, 12, 13, 47, 820, DateTimeKind.Local).AddTicks(5943),
                            Km = 799,
                            Price = 72,
                            RegistrationNumber = "RO7SH8CMFCIK47237",
                            Type = 3
                        },
                        new
                        {
                            Id = 39,
                            Brand = 7,
                            DateOfManufacture = new DateTime(2022, 9, 5, 9, 20, 40, 236, DateTimeKind.Local).AddTicks(9977),
                            Km = 569,
                            Price = 54,
                            RegistrationNumber = "2DSJKWD5P9FX87796",
                            Type = 2
                        },
                        new
                        {
                            Id = 40,
                            Brand = 5,
                            DateOfManufacture = new DateTime(2022, 11, 24, 15, 8, 19, 510, DateTimeKind.Local).AddTicks(5231),
                            Km = 640,
                            Price = 8,
                            RegistrationNumber = "MVF0WL2VOYXA38937",
                            Type = 0
                        });
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[CarId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a056e274-b4a9-40bc-854f-c431a5d6c34e",
                            Email = "florin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "FLORIN@GMAIL.COM",
                            NormalizedUserName = "FLORIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEO+rUSo/mS1V7L67CEZWoIUSr/JuHdEnVVHamT8iTL2Ttka0lqRtOS9WM2OZiBMKUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48a50c30-0074-49bd-b8e3-8296daa96389",
                            TwoFactorEnabled = false,
                            UserName = "Florin"
                        },
                        new
                        {
                            Id = "9c44780-a24d-4543-9cc6-0993d048aacu7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70465eea-9591-4a02-8298-97eef3efb65c",
                            Email = "alin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ALIN@GMAIL.COM",
                            NormalizedUserName = "ALIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBHc3eqs8HpsgYtpffHwUo/LiKtOakSNny7D10IAnDcgxDkNO+oK3w3c+RUCs+xSkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b64f6ffe-7bfe-412c-95f3-0eb0210b8930",
                            TwoFactorEnabled = false,
                            UserName = "Alin"
                        },
                        new
                        {
                            Id = "9a27620-a44f-4543-9dk6-0993d048sia7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5625788d-f231-4591-98a2-38b1215ec8dd",
                            Email = "bogdan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "BOGDAN@GMAIL.COM",
                            NormalizedUserName = "BOGDAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOncLywomw9UObmg9l8JAcDpPLKObxbI+dK+NHJ9A9RQOidQVdyd8BydaaUgchVdRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9323393-f874-431f-b311-fd235b886a43",
                            TwoFactorEnabled = false,
                            UserName = "Bogdan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RentCarApplication.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RentCarApplication.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCarApplication.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RentCarApplication.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.Comment", b =>
                {
                    b.HasOne("RentCarApplication.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.Rent", b =>
                {
                    b.HasOne("RentCarApplication.Domain.Entities.Car", "Car")
                        .WithOne("Rent")
                        .HasForeignKey("RentCarApplication.Domain.Entities.Rent", "CarId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("RentCarApplication.Domain.Entities.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.Car", b =>
                {
                    b.Navigation("Rent");
                });

            modelBuilder.Entity("RentCarApplication.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
